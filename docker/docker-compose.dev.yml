version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: traceone-monitoring-db
    environment:
      POSTGRES_DB: traceone_monitoring_dev
      POSTGRES_USER: traceone_user
      POSTGRES_PASSWORD: traceone_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traceone_user -d traceone_monitoring_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: traceone-monitoring-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # TraceOne Monitoring Service
  monitoring-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: traceone-monitoring-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://traceone_user:traceone_password@postgres:5432/traceone_monitoring_dev
      
      # D&B API (set these in .env file)
      DNB_CLIENT_ID: ${DNB_CLIENT_ID}
      DNB_CLIENT_SECRET: ${DNB_CLIENT_SECRET}
      
      # Application
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      
      # Security
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-dev_encryption_key_32_chars_long}
      
      # Monitoring
      MONITORING_POLLING_INTERVAL: 60
      MONITORING_MAX_NOTIFICATIONS: 50
      
      # Metrics
      METRICS_ENABLED: "true"
      METRICS_PORT: 9090
    ports:
      - "8080:8080"  # Main service
      - "9090:9090"  # Metrics
    volumes:
      - ./logs:/app/logs
      - ../config:/app/config
      - ../examples:/app/examples
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: traceone-monitoring-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: traceone-monitoring-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: traceone-monitoring-network
