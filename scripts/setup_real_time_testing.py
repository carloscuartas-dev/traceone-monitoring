#!/usr/bin/env python3
"""
Setup script for real-time testing with D&B dev registration entity

This script helps you configure and test your D&B API connection before running
real-time monitoring tests.
"""

import os
import sys
import base64
import secrets
from pathlib import Path
import click


def generate_encryption_key():
    """Generate a secure 32-byte encryption key"""
    key = secrets.token_bytes(32)
    return base64.b64encode(key).decode('utf-8')


def check_environment_setup():
    """Check if the environment is properly set up"""
    config_dir = Path("config")
    
    # Check if dev.env exists
    dev_env_path = config_dir / "dev.env"
    
    if not dev_env_path.exists():
        click.echo("‚ùå dev.env file not found")
        return False
    
    # Check if critical environment variables are set
    with open(dev_env_path, 'r') as f:
        content = f.read()
    
    missing_vars = []
    required_vars = ['DNB_CLIENT_ID', 'DNB_CLIENT_SECRET', 'ENCRYPTION_KEY']
    
    for var in required_vars:
        if f"{var}=your_" in content or f"{var}=" not in content:
            missing_vars.append(var)
    
    if missing_vars:
        click.echo(f"‚ùå Missing or placeholder values for: {', '.join(missing_vars)}")
        return False
    
    click.echo("‚úÖ Environment configuration looks good")
    return True


def setup_environment_file():
    """Interactive setup of environment file"""
    click.echo("üîß Setting up development environment configuration")
    
    # Get D&B credentials
    client_id = click.prompt("Enter your D&B Client ID", type=str)
    client_secret = click.prompt("Enter your D&B Client Secret", type=str, hide_input=True)
    
    # Generate encryption key
    encryption_key = generate_encryption_key()
    click.echo(f"Generated encryption key: {encryption_key[:20]}...")
    
    # Create the configuration
    config_content = f"""# TraceOne Monitoring Development Environment
# Generated by setup script

# D&B API Credentials
DNB_CLIENT_ID={client_id}
DNB_CLIENT_SECRET={client_secret}

# Database Configuration (using SQLite for development)
DATABASE_URL=sqlite:///./data/traceone_monitoring_dev.db

# Security
ENCRYPTION_KEY={encryption_key}

# Development Settings
LOG_LEVEL=DEBUG
LOG_FILE=./logs/traceone-monitoring-dev.log
ENVIRONMENT=development
DEBUG=true

# Monitoring Configuration
MONITORING_POLLING_INTERVAL=60  # 1 minute for testing
MONITORING_MAX_NOTIFICATIONS=50

# API Configuration
API_TIMEOUT=30
RETRY_ATTEMPTS=3
BACKOFF_FACTOR=2.0
"""
    
    # Write to file
    config_dir = Path("config")
    dev_env_path = config_dir / "dev.env"
    
    with open(dev_env_path, 'w') as f:
        f.write(config_content)
    
    click.echo(f"‚úÖ Configuration written to {dev_env_path}")
    return True


@click.group()
def cli():
    """Setup script for TraceOne real-time testing"""
    pass


@cli.command()
def setup():
    """Interactive setup of development environment"""
    click.echo("üöÄ TraceOne Monitoring - Real-time Testing Setup")
    click.echo("=" * 50)
    
    if not setup_environment_file():
        click.echo("‚ùå Setup failed")
        sys.exit(1)
    
    click.echo("‚úÖ Setup completed successfully!")
    click.echo("\nNext steps:")
    click.echo("1. Run: python scripts/real_time_testing.py")
    click.echo("2. Or test specific DUNS: python scripts/real_time_testing.py -d YOUR_DUNS_NUMBER")


@cli.command()
def check():
    """Check if environment is properly configured"""
    click.echo("üîç Checking environment configuration...")
    
    if check_environment_setup():
        click.echo("‚úÖ Environment is ready for real-time testing!")
        
        # Show next steps
        click.echo("\nüìã Available testing commands:")
        click.echo("‚Ä¢ Test authentication: python scripts/real_time_testing.py --help")
        click.echo("‚Ä¢ Run comprehensive test: python scripts/real_time_testing.py")
        click.echo("‚Ä¢ Test specific DUNS: python scripts/real_time_testing.py -d DUNS_NUMBER")
        click.echo("‚Ä¢ Monitor for 10 minutes: python scripts/real_time_testing.py -d DUNS_NUMBER -dur 10")
        
    else:
        click.echo("‚ùå Environment needs configuration. Run: python scripts/setup_real_time_testing.py setup")
        sys.exit(1)


@cli.command()
@click.option('--client-id', prompt='D&B Client ID', help='Your D&B API Client ID')
@click.option('--client-secret', prompt='D&B Client Secret', hide_input=True, help='Your D&B API Client Secret')
def quick_setup(client_id, client_secret):
    """Quick setup with command line parameters"""
    
    # Generate encryption key
    encryption_key = generate_encryption_key()
    
    # Create configuration
    config_content = f"""# TraceOne Monitoring Development Environment
DNB_CLIENT_ID={client_id}
DNB_CLIENT_SECRET={client_secret}
DATABASE_URL=sqlite:///./data/traceone_monitoring_dev.db
ENCRYPTION_KEY={encryption_key}
LOG_LEVEL=DEBUG
LOG_FILE=./logs/traceone-monitoring-dev.log
ENVIRONMENT=development
DEBUG=true
MONITORING_POLLING_INTERVAL=60
MONITORING_MAX_NOTIFICATIONS=50
API_TIMEOUT=30
RETRY_ATTEMPTS=3
BACKOFF_FACTOR=2.0
"""
    
    # Write configuration
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    
    with open(config_dir / "dev.env", 'w') as f:
        f.write(config_content)
    
    click.echo("‚úÖ Quick setup completed!")
    click.echo("Ready for real-time testing.")


if __name__ == "__main__":
    cli()
